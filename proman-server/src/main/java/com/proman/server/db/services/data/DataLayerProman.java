package com.proman.server.db.services.data;

import java.io.Serializable;
import java.util.Collection;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.ReplicationMode;
import org.hibernate.SQLQuery;
import org.hibernate.Session;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;
import com.proman.server.db.model.obj.proman.Institution;
import com.proman.server.db.model.obj.proman.SchemaVersion;
import com.proman.server.db.model.obj.proman.Student;
import com.proman.server.db.model.obj.proman.StudentGrades;
import com.proman.server.db.model.obj.proman.Team;
import com.proman.server.db.model.obj.proman.TeamManager;
import com.proman.server.db.model.obj.proman.TeamManagerMap;
import com.proman.server.db.model.obj.proman.TeamManagerMapPK;
import com.proman.server.db.model.obj.proman.TeamStudent;
import com.proman.server.db.model.obj.proman.TeamStudentPK;
import com.proman.server.db.model.obj.proman.UserDetails;
import com.proman.server.db.model.obj.proman.UserRoles;
import com.proman.server.db.model.obj.proman.Users;

/**
 * Data layer.
 * 
 * @author autogenerated
 */
public interface DataLayerProman {

	/**
	 * Deletes the given object from disk.
	 * 
	 * @param <T>
	 *            A DataLayerObject-derived type
	 * @param persistentObject
	 *            Object to delete
	 */
	<T> void delete(T persistentObject);

	/**
	 * Refresh the object $class.className from disk.
	 * 
	 * @param <T>
	 *            A DataLayerObject-derived type
	 * @param persistentObject
	 *            Object to reload
	 */
	<T> void refresh(T persistentObject);

	/**
	 * Saves the given object to disk.
	 * 
	 * @param persistentObject
	 *            Object to save
	 * @param <T>
	 *            A DataLayerObject-derived type
	 * @return Identifier of saved object
	 */
	<T> Serializable save(T persistentObject);

	/**
	 * Saves or updates the given $class.className object to disk.
	 * 
	 * @param <T>
	 *            A DataLayerObject-derived type
	 * @param persistentObject
	 *            Object to save
	 */
	<T> void saveOrUpdate(T persistentObject);

	/**
	 * Updates the given object to disk.
	 * 
	 * @param <T>
	 *            A DataLayerObject-derived type
	 * @param persistentObject
	 *            Object to update
	 */
	<T> void update(T persistentObject);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (Institution obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteInstitution(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a Institution object
	 */
	Institution loadInstitution(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	Institution getInstitution(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (SchemaVersion obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteSchemaVersion(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a SchemaVersion object
	 */
	SchemaVersion loadSchemaVersion(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	SchemaVersion getSchemaVersion(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (Student obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteStudent(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a Student object
	 */
	Student loadStudent(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	Student getStudent(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (StudentGrades obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteStudentGrades(final String id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a StudentGrades object
	 */
	StudentGrades loadStudentGrades(final String id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	StudentGrades getStudentGrades(final String id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (Team obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteTeam(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a Team object
	 */
	Team loadTeam(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	Team getTeam(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (TeamManager obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteTeamManager(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a TeamManager object
	 */
	TeamManager loadTeamManager(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	TeamManager getTeamManager(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (TeamManagerMap obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteTeamManagerMap(final TeamManagerMapPK id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a TeamManagerMap object
	 */
	TeamManagerMap loadTeamManagerMap(final TeamManagerMapPK id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	TeamManagerMap getTeamManagerMap(final TeamManagerMapPK id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (TeamStudent obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteTeamStudent(final TeamStudentPK id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a TeamStudent object
	 */
	TeamStudent loadTeamStudent(final TeamStudentPK id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	TeamStudent getTeamStudent(final TeamStudentPK id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (Users obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteUsers(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a Users object
	 */
	Users loadUsers(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	Users getUsers(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (UserDetails obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteUserDetails(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a UserDetails object
	 */
	UserDetails loadUserDetails(final Integer id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	UserDetails getUserDetails(final Integer id);

	/**
	 * Deletes an object of a given Id. Will load the object internally so consider
	 * using delete (UserRoles obj) directly
	 * 
	 * @param id
	 *            Identifier to delete
	 */
	void deleteUserRoles(final String id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Identifier to load
	 * @return a UserRoles object
	 */
	UserRoles loadUserRoles(final String id);

	/**
	 * Loads the given Object.
	 * 
	 * @param id
	 *            Id to load
	 * @return An object of type T
	 */
	UserRoles getUserRoles(final String id);

	/**
	 * Returns a query handle.
	 * 
	 * @param query
	 *            Query to use
	 * @return A query instance
	 */
	Query createQuery(final String query);

	/**
	 * Returns a criteria handle.
	 * 
	 * @param criteria
	 *            Criteria to use
	 * @return A criteria instance
	 */
	Criteria createCriteria(final String criteria);

	/**
	 * Returns a Query handle based on your package-level named query.
	 * 
	 * @param query
	 *            Query to use
	 * @return A query instance
	 */
	Query getNamedQuery(final String query);

	/**
	 * Create a new Criteria instance, for the given entity class, or a superclass
	 * of an entity class.
	 * 
	 * @param persistentObject
	 *            a class, which is persistent, or has persistent subclasses
	 * @return Criteria instance
	 */
	@SuppressWarnings("unchecked")
	Criteria createCriteria(Class persistentObject);

	/**
	 * Flushes the currently open session.
	 */
	void flushSession();

	/**
	 * Clears the currently open session.
	 */
	void clearSession();

	/**
	 * Flushes and clears the currently open session.
	 */
	void flushAndClearSession();

	/**
	 * Call currentSession.replicate.
	 * 
	 * @param obj
	 *            to replicate
	 * @param replicationMode
	 *            mode
	 */
	void replicate(Object obj, ReplicationMode replicationMode);

	/**
	 * Hibernate Merge.
	 * 
	 * @param obj
	 *            to merge
	 * @return obj merged.
	 */
	Object merge(Object obj);

	/**
	 * Returns the current session.
	 * 
	 * @return the currently active session
	 */
	Session getCurrentSession();

	/**
	 * Returns a query handle.
	 * 
	 * @param query
	 *            Query to use
	 * @return A query instance
	 */
	SQLQuery createSQLQuery(final String query);

	/**
	 * Remove this instance from the session cache. Changes to the instance will not
	 * be synchronized with the database
	 * 
	 * @param obj
	 *            object to evict
	 */
	void evict(Object obj);

	/**
	 * Return the persistent instance of the given entity class with the given
	 * identifier, or null if there is no such persistent instance. (If the
	 * instance, or a proxy for the instance, is already associated with the
	 * session, return that instance or proxy)
	 *
	 * @param clazz
	 *            a persistent class
	 * @param id
	 *            a valid identifier of an existing persistent instance of the class
	 * @return a persistent instance or null
	 * @throws HibernateException
	 */
	Object get(Class<?> clazz, Serializable id) throws HibernateException;

	/**
	 * Return the persistent instance of the given entity class with the given
	 * identifier, assuming that the instance exists. You should not use this method
	 * to determine if an instance exists (use get() instead). Use this only to
	 * retrieve an instance that you assume exists, where non-existence would be an
	 * actual error.
	 *
	 * @param clazz
	 *            a persistent class
	 * @param id
	 *            a valid identifier of an existing persistent instance of the class
	 * @return the persistent instance or proxy
	 * @throws HibernateException
	 */
	Object load(Class<?> clazz, Serializable id) throws HibernateException;

	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity
	 *            to reattach
	 */
	void reattachEntityWithNoLock(IPojoGenEntity entity);

	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities
	 *            to attach
	 */
	void reattachEntitiesWithNoLock(Collection<? extends IPojoGenEntity> entities);
}
