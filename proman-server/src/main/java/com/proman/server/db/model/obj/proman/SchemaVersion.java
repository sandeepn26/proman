package com.proman.server.db.model.obj.proman;

import com.proman.server.db.model.obj.proman.iface.ISchemaVersion;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;


/** 
 * Object mapping for hibernate-handled table: schema_version.
 * @author autogenerated
 */

@Entity
@Table(name = "schema_version", catalog = "proman")
public class SchemaVersion implements Cloneable, Serializable, IPojoGenEntity, ISchemaVersion {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559039809L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer checksum;
	/** Field mapping. */
	private String description;
	/** Field mapping. */
	private Integer executionTime;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private String installedBy;
	/** Field mapping. */
	private Date installedOn;
	/** Field mapping. */
	private String script;
	/** Field mapping. */
	private Boolean success;
	/** Field mapping. */
	private String type;
	/** Field mapping. */
	private String version;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public SchemaVersion() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public SchemaVersion(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param description String object;
	 * @param executionTime Integer object;
	 * @param id Integer object;
	 * @param installedBy String object;
	 * @param installedOn Date object;
	 * @param script String object;
	 * @param success Boolean object;
	 * @param type String object;
	 */
	public SchemaVersion(String description, Integer executionTime, Integer id, 					
			String installedBy, Date installedOn, String script, 					
			Boolean success, String type) {

		this.description = description;
		this.executionTime = executionTime;
		this.id = id;
		this.installedBy = installedBy;
		this.installedOn = installedOn;
		this.script = script;
		this.success = success;
		this.type = type;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return SchemaVersion.class;
	}
 

    /**
     * Return the value associated with the column: checksum.
	 * @return A Integer object (this.checksum)
	 */
	public Integer getChecksum() {
		return this.checksum;
		
	}
	

  
    /**  
     * Set the value related to the column: checksum.
	 * @param checksum the checksum value you wish to set
	 */
	public void setChecksum(final Integer checksum) {
		this.checksum = checksum;
	}

    /**
     * Return the value associated with the column: description.
	 * @return A String object (this.description)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 200  )
	public String getDescription() {
		return this.description;
		
	}
	

  
    /**  
     * Set the value related to the column: description.
	 * @param description the description value you wish to set
	 */
	public void setDescription(final String description) {
		this.description = description;
	}

    /**
     * Return the value associated with the column: executionTime.
	 * @return A Integer object (this.executionTime)
	 */
	@Basic( optional = false )
	@Column( name = "execution_time", nullable = false  )
	public Integer getExecutionTime() {
		return this.executionTime;
		
	}
	

  
    /**  
     * Set the value related to the column: executionTime.
	 * @param executionTime the executionTime value you wish to set
	 */
	public void setExecutionTime(final Integer executionTime) {
		this.executionTime = executionTime;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "installed_rank", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: installedBy.
	 * @return A String object (this.installedBy)
	 */
	@Basic( optional = false )
	@Column( name = "installed_by", nullable = false, length = 100  )
	public String getInstalledBy() {
		return this.installedBy;
		
	}
	

  
    /**  
     * Set the value related to the column: installedBy.
	 * @param installedBy the installedBy value you wish to set
	 */
	public void setInstalledBy(final String installedBy) {
		this.installedBy = installedBy;
	}

    /**
     * Return the value associated with the column: installedOn.
	 * @return A Date object (this.installedOn)
	 */
	@Basic( optional = false )
	@Column( name = "installed_on", nullable = false  )
	public Date getInstalledOn() {
		return this.installedOn;
		
	}
	

  
    /**  
     * Set the value related to the column: installedOn.
	 * @param installedOn the installedOn value you wish to set
	 */
	public void setInstalledOn(final Date installedOn) {
		this.installedOn = installedOn;
	}

    /**
     * Return the value associated with the column: script.
	 * @return A String object (this.script)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 1000  )
	public String getScript() {
		return this.script;
		
	}
	

  
    /**  
     * Set the value related to the column: script.
	 * @param script the script value you wish to set
	 */
	public void setScript(final String script) {
		this.script = script;
	}

    /**
     * Return the value associated with the column: success.
	 * @return A Boolean object (this.success)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Boolean isSuccess() {
		return this.success;
		
	}
	

  
    /**  
     * Set the value related to the column: success.
	 * @param success the success value you wish to set
	 */
	public void setSuccess(final Boolean success) {
		this.success = success;
	}

    /**
     * Return the value associated with the column: type.
	 * @return A String object (this.type)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 20  )
	public String getType() {
		return this.type;
		
	}
	

  
    /**  
     * Set the value related to the column: type.
	 * @param type the type value you wish to set
	 */
	public void setType(final String type) {
		this.type = type;
	}

    /**
     * Return the value associated with the column: version.
	 * @return A String object (this.version)
	 */
	@Basic( optional = true )
	@Column( length = 50  )
	public String getVersion() {
		return this.version;
		
	}
	

  
    /**  
     * Set the value related to the column: version.
	 * @param version the version value you wish to set
	 */
	public void setVersion(final String version) {
		this.version = version;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public SchemaVersion clone() throws CloneNotSupportedException {
		
        final SchemaVersion copy = (SchemaVersion)super.clone();

		copy.setChecksum(this.getChecksum());
		copy.setDescription(this.getDescription());
		copy.setExecutionTime(this.getExecutionTime());
		copy.setId(this.getId());
		copy.setInstalledBy(this.getInstalledBy());
		copy.setInstalledOn(this.getInstalledOn());
		copy.setScript(this.getScript());
		copy.setSuccess(this.isSuccess());
		copy.setType(this.getType());
		copy.setVersion(this.getVersion());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("checksum: " + this.getChecksum() + ", ");
		sb.append("description: " + this.getDescription() + ", ");
		sb.append("executionTime: " + this.getExecutionTime() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("installedBy: " + this.getInstalledBy() + ", ");
		sb.append("installedOn: " + this.getInstalledOn() + ", ");
		sb.append("script: " + this.getScript() + ", ");
		sb.append("success: " + this.isSuccess() + ", ");
		sb.append("type: " + this.getType() + ", ");
		sb.append("version: " + this.getVersion());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final SchemaVersion that; 
		try {
			that = (SchemaVersion) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getChecksum() == null) && (that.getChecksum() == null)) || (getChecksum() != null && getChecksum().equals(that.getChecksum())));
		result = result && (((getDescription() == null) && (that.getDescription() == null)) || (getDescription() != null && getDescription().equals(that.getDescription())));
		result = result && (((getExecutionTime() == null) && (that.getExecutionTime() == null)) || (getExecutionTime() != null && getExecutionTime().equals(that.getExecutionTime())));
		result = result && (((getInstalledBy() == null) && (that.getInstalledBy() == null)) || (getInstalledBy() != null && getInstalledBy().equals(that.getInstalledBy())));
		result = result && (((getInstalledOn() == null) && (that.getInstalledOn() == null)) || (getInstalledOn() != null && getInstalledOn().equals(that.getInstalledOn())));
		result = result && (((getScript() == null) && (that.getScript() == null)) || (getScript() != null && getScript().equals(that.getScript())));
		result = result && (((isSuccess() == null) && (that.isSuccess() == null)) || (isSuccess() != null && isSuccess().equals(that.isSuccess())));
		result = result && (((getType() == null) && (that.getType() == null)) || (getType() != null && getType().equals(that.getType())));
		result = result && (((getVersion() == null) && (that.getVersion() == null)) || (getVersion() != null && getVersion().equals(that.getVersion())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
