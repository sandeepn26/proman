package com.proman.server.db.factories.proman;

import com.proman.server.db.factories.proman.PromanDataPoolFactory;
import com.proman.server.db.model.obj.proman.*;
import org.springframework.stereotype.Component;

import com.github.wwadge.hbnpojogen.randomlib.data.dataGeneration.BasicDataGenerator;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import com.proman.server.db.model.obj.proman.Student;
import com.proman.server.db.model.obj.proman.Users;

import java.util.Collection;

/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class PromanDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"UserDetails", "TeamStudent", "TeamManagerMap", "TeamManager", "Student", "Institution", "Users", "UserRoles", "Team", "StudentGrades", "SchemaVersion"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("Institution", "Users");
 		tableDeps.put("Student", "Users");
 		tableDeps.put("TeamManager", "Users");
 		tableDeps.put("TeamManagerMap", "Team");
 		tableDeps.put("TeamManagerMap", "TeamManager");
 		tableDeps.put("TeamStudent", "Student");
 		tableDeps.put("TeamStudent", "Team");
 		tableDeps.put("Users", "UserRoles");
 		tableDeps.put("UserDetails", "Users");
	}

    /**
     * Data pool factory for Institution.
     * @return Institution A Institution object
     */
    public static Institution getInstitution() {

        Institution institution =  getInstitution(
	        getUsers());

		return institution;
       
    }

     /**
     * Data pool factory for Institution.
     * @param owner A valid Users object
     * @return Institution A Institution object
     */
    public static Institution getInstitution(Users owner) {
        Institution institution = new Institution();     
        institution.setCreateDate(BasicDataGenerator.generateDate());
        institution.setInstitutionCode(BasicDataGenerator.generateRandomString(20));
        institution.setInstitutionDescription(BasicDataGenerator.generateRandomString(50));
        institution.setInstitutionName(BasicDataGenerator.generateRandomString(50));
        institution.setInstitutionType(BasicDataGenerator.generateRandomString(10));
		if (owner != null) {
			owner.addInstitution (institution);
		}
        institution.setUpdateDate(BasicDataGenerator.generateDate());

        return institution;
    }

    /**
     * Data pool factory for SchemaVersion.
     * @return SchemaVersionA SchemaVersion object
     */
    public static SchemaVersion getSchemaVersion() {

        SchemaVersion schemaVersion = new SchemaVersion();    
        
        schemaVersion.setChecksum(BasicDataGenerator.generateRandomInt());
        schemaVersion.setDescription(BasicDataGenerator.generateRandomString(200));
        schemaVersion.setExecutionTime(BasicDataGenerator.generateRandomInt());
        schemaVersion.setId(BasicDataGenerator.generateRandomInt());
        schemaVersion.setInstalledBy(BasicDataGenerator.generateRandomString(100));
        schemaVersion.setInstalledOn(BasicDataGenerator.generateDate());
        schemaVersion.setScript(BasicDataGenerator.generateRandomString(1000));
        schemaVersion.setSuccess(BasicDataGenerator.generateRandomBoolean());
        schemaVersion.setType(BasicDataGenerator.generateRandomString(20));
        schemaVersion.setVersion(BasicDataGenerator.generateRandomString(50));

        return schemaVersion;
    }

    /**
     * Data pool factory for Student.
     * @return Student A Student object
     */
    public static Student getStudent() {

        Student student =  getStudent(
	        getUsers());

		return student;
       
    }

     /**
     * Data pool factory for Student.
     * @param parentGuardian A valid Users object
     * @return Student A Student object
     */
    public static Student getStudent(Users parentGuardian) {
        Student student = new Student();     
        student.setAuthorizedPickupPersons(BasicDataGenerator.generateRandomString(250));
        student.setCreateDate(BasicDataGenerator.generateDate());
        student.setFirstName(BasicDataGenerator.generateRandomString(50));
        student.setFoodAllergies(BasicDataGenerator.generateRandomString(50));
        student.setGrade(BasicDataGenerator.generateRandomString(10));
        student.setLastName(BasicDataGenerator.generateRandomString(50));
        student.setOtherConditions(BasicDataGenerator.generateRandomString(50));
		if (parentGuardian != null) {
			parentGuardian.addStudent (student);
		}
        student.setSchool(BasicDataGenerator.generateRandomString(50));
        student.setTeacher(BasicDataGenerator.generateRandomString(10));
        student.setUpdatedDate(BasicDataGenerator.generateDate());

        return student;
    }

    /**
     * Data pool factory for StudentGrades.
     * @return StudentGradesA StudentGrades object
     */
    public static StudentGrades getStudentGrades() {

        StudentGrades studentGrades = new StudentGrades();    
        
        studentGrades.setCreateDate(BasicDataGenerator.generateDate());
        studentGrades.setGradeDescription(BasicDataGenerator.generateRandomString(25));
        studentGrades.setGradeValue(BasicDataGenerator.generateRandomInt());
        studentGrades.setId(BasicDataGenerator.generateRandomString(10));
        studentGrades.setUpdateDate(BasicDataGenerator.generateDate());

        return studentGrades;
    }

    /**
     * Data pool factory for Team.
     * @return TeamA Team object
     */
    public static Team getTeam() {

        Team team = new Team();    
        
        team.setActive(BasicDataGenerator.generateRandomBoolean());
        team.setCreateDate(BasicDataGenerator.generateDate());
        team.setOwnerId(BasicDataGenerator.generateRandomInt());
        team.setTeamCode(BasicDataGenerator.generateRandomString(20));
        team.setTeamDescription(BasicDataGenerator.generateRandomString(50));
        team.setTeamGradeMax(BasicDataGenerator.generateRandomString(10));
        team.setTeamGradeMin(BasicDataGenerator.generateRandomString(10));
        team.setTeamName(BasicDataGenerator.generateRandomString(50));
        team.setTeamType(BasicDataGenerator.generateRandomString(10));
        team.setUpdateDate(BasicDataGenerator.generateDate());

        return team;
    }

    /**
     * Data pool factory for TeamManager.
     * @return TeamManager A TeamManager object
     */
    public static TeamManager getTeamManager() {

        TeamManager teamManager =  getTeamManager(
	        getUsers());

		return teamManager;
       
    }

     /**
     * Data pool factory for TeamManager.
     * @param managerUser A valid Users object
     * @return TeamManager A TeamManager object
     */
    public static TeamManager getTeamManager(Users managerUser) {
        TeamManager teamManager = new TeamManager();     
        teamManager.setAssuranceWaiverSigned(BasicDataGenerator.generateRandomBoolean());
        teamManager.setCreateDate(BasicDataGenerator.generateDate());
        teamManager.setFingerPrintingDone(BasicDataGenerator.generateRandomBoolean());
		if (managerUser != null) {
			managerUser.addTeamManager (teamManager);
		}
        teamManager.setUpdateDate(BasicDataGenerator.generateDate());

        return teamManager;
    }

    /**
     * Data pool factory for TeamManagerMap.
     * @return TeamManagerMapA TeamManagerMap object
     */
    public static TeamManagerMap getTeamManagerMap() {

        TeamManagerMap teamManagerMap = new TeamManagerMap();    
        
        teamManagerMap.setId(getTeamManagerMapPK());
        teamManagerMap.setUpdatedDate(BasicDataGenerator.generateDate());

        return teamManagerMap;
    }

    /**
     * Data pool factory for TeamManagerMapPK.
     * @return TeamManagerMapPK A TeamManagerMapPK object
     */
    public static TeamManagerMapPK getTeamManagerMapPK() {

        TeamManagerMapPK teamManagerMapPK =  getTeamManagerMapPK(
	        getTeamManager(), getTeam());

		return teamManagerMapPK;
       
    }

     /**
     * Data pool factory for TeamManagerMapPK.
     * @param manager A valid TeamManager object
     * @param team A valid Team object
     * @return TeamManagerMapPK A TeamManagerMapPK object
     */
    public static TeamManagerMapPK getTeamManagerMapPK(TeamManager manager, Team team) {
        TeamManagerMapPK teamManagerMapPK = new TeamManagerMapPK();     
        teamManagerMapPK.setManager(manager);
        teamManagerMapPK.setTeam(team);

        return teamManagerMapPK;
    }

    /**
     * Data pool factory for TeamStudent.
     * @return TeamStudentA TeamStudent object
     */
    public static TeamStudent getTeamStudent() {

        TeamStudent teamStudent = new TeamStudent();    
        
        teamStudent.setId(getTeamStudentPK());
        teamStudent.setUpdatedDate(BasicDataGenerator.generateDate());

        return teamStudent;
    }

    /**
     * Data pool factory for TeamStudentPK.
     * @return TeamStudentPK A TeamStudentPK object
     */
    public static TeamStudentPK getTeamStudentPK() {

        TeamStudentPK teamStudentPK =  getTeamStudentPK(
	        getStudent(), getTeam());

		return teamStudentPK;
       
    }

     /**
     * Data pool factory for TeamStudentPK.
     * @param student A valid Student object
     * @param team A valid Team object
     * @return TeamStudentPK A TeamStudentPK object
     */
    public static TeamStudentPK getTeamStudentPK(Student student, Team team) {
        TeamStudentPK teamStudentPK = new TeamStudentPK();     
        teamStudentPK.setStudent(student);
        teamStudentPK.setTeam(team);

        return teamStudentPK;
    }

    /**
     * Data pool factory for Users.
     * @return Users A Users object
     */
    public static Users getUsers() {

        Users users =  getUsers(
	        getUserRoles());

		return users;
       
    }

     /**
     * Data pool factory for Users.
     * @param role A valid UserRoles object
     * @return Users A Users object
     */
    public static Users getUsers(UserRoles role) {
        Users users = new Users();     
        users.setCreateDate(BasicDataGenerator.generateDate());
        users.setDisplayName(BasicDataGenerator.generateRandomString(50));
        users.setEmail(BasicDataGenerator.generateRandomString(80));
        users.setEnabled(BasicDataGenerator.generateRandomBoolean());
        users.setFailedLogins(BasicDataGenerator.generateRandomInt());
        users.setLastLoginDate(BasicDataGenerator.generateDate());
        users.setLocked(BasicDataGenerator.generateRandomBoolean());
        users.setPassword(BasicDataGenerator.generateRandomStringChar(41));
		if (role != null) {
			role.addUsers (users);
		}
        users.setUpdatedDate(BasicDataGenerator.generateDate());

        return users;
    }

    /**
     * Data pool factory for UserDetails.
     * @return UserDetails A UserDetails object
     */
    public static UserDetails getUserDetails() {

        UserDetails userDetails =  getUserDetails(
	        getUsers());

		return userDetails;
       
    }

     /**
     * Data pool factory for UserDetails.
     * @param user A valid Users object
     * @return UserDetails A UserDetails object
     */
    public static UserDetails getUserDetails(Users user) {
        UserDetails userDetails = new UserDetails();     
        userDetails.setAddress(BasicDataGenerator.generateRandomString(80));
        userDetails.setCity(BasicDataGenerator.generateRandomString(30));
        userDetails.setCounty(BasicDataGenerator.generateRandomStringChar(7));
        userDetails.setCreateDate(BasicDataGenerator.generateDate());
        userDetails.setDateOfBirth(BasicDataGenerator.generateDate());
        userDetails.setFirstName(BasicDataGenerator.generateRandomString(25));
        userDetails.setLastName(BasicDataGenerator.generateRandomString(25));
        userDetails.setPhone(BasicDataGenerator.generateRandomString(15));
        userDetails.setPostCode(BasicDataGenerator.generateRandomStringChar(7));
        userDetails.setSecondaryEmail(BasicDataGenerator.generateRandomString(80));
        userDetails.setSecondaryPhone(BasicDataGenerator.generateRandomString(15));
        userDetails.setState(BasicDataGenerator.generateRandomStringChar(2));
        userDetails.setUpdateDate(BasicDataGenerator.generateDate());
		if (user != null) {
			user.addUserDetails (userDetails);
		}

        return userDetails;
    }

    /**
     * Data pool factory for UserRoles.
     * @return UserRolesA UserRoles object
     */
    public static UserRoles getUserRoles() {

        UserRoles userRoles = new UserRoles();    
        
        userRoles.setCreateDate(BasicDataGenerator.generateDate());
        userRoles.setId(BasicDataGenerator.generateRandomString(10));
        userRoles.setRoleDescription(BasicDataGenerator.generateRandomString(25));
        userRoles.setRoleLongDescription(BasicDataGenerator.generateRandomString(256));
        userRoles.setUpdateDate(BasicDataGenerator.generateDate());

        return userRoles;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}