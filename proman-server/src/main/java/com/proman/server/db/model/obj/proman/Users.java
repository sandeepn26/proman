package com.proman.server.db.model.obj.proman;

import com.proman.server.db.model.obj.proman.Institution;
import com.proman.server.db.model.obj.proman.Student;
import com.proman.server.db.model.obj.proman.TeamManager;
import com.proman.server.db.model.obj.proman.UserDetails;
import com.proman.server.db.model.obj.proman.iface.IUsers;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;


/** 
 * Object mapping for hibernate-handled table: users.
 * @author autogenerated
 */

@Entity
@Table(name = "users", catalog = "proman")
public class Users implements Cloneable, Serializable, IPojoGenEntity, IUsers {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559039798L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Date createDate;
	/** Field mapping. */
	private String displayName;
	/** Field mapping. */
	private String email;
	/** Field mapping. */
	private Boolean enabled;
	/** Field mapping. */
	private Integer failedLogins;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Set<Institution> institutions = new HashSet<Institution>();

	/** Field mapping. */
	private Date lastLoginDate;
	/** Field mapping. */
	private Boolean locked;
	/** Field mapping. */
	private String password;
	/** Field mapping. */
	private UserRoles role;
	/** Field mapping. */
	private Set<Student> students = new HashSet<Student>();

	/** Field mapping. */
	private Set<TeamManager> teamManagers = new HashSet<TeamManager>();

	/** Field mapping. */
	private Date updatedDate;
	/** Field mapping. */
	private Set<UserDetails> userDetailss = new HashSet<UserDetails>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Users() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Users(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param createDate Date object;
	 * @param email String object;
	 * @param enabled Boolean object;
	 * @param failedLogins Integer object;
	 * @param id Integer object;
	 * @param lastLoginDate Date object;
	 * @param locked Boolean object;
	 * @param password String object;
	 * @param role UserRoles object;
	 * @param updatedDate Date object;
	 */
	public Users(Date createDate, String email, Boolean enabled, 					
			Integer failedLogins, Integer id, Date lastLoginDate, 					
			Boolean locked, String password, UserRoles role, 					
			Date updatedDate) {

		this.createDate = createDate;
		this.email = email;
		this.enabled = enabled;
		this.failedLogins = failedLogins;
		this.id = id;
		this.lastLoginDate = lastLoginDate;
		this.locked = locked;
		this.password = password;
		this.role = role;
		this.updatedDate = updatedDate;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Users.class;
	}
 

    /**
     * Return the value associated with the column: createDate.
	 * @return A Date object (this.createDate)
	 */
	@Basic( optional = false )
	@Column( name = "create_date", nullable = false  )
	public Date getCreateDate() {
		return this.createDate;
		
	}
	

  
    /**  
     * Set the value related to the column: createDate.
	 * @param createDate the createDate value you wish to set
	 */
	public void setCreateDate(final Date createDate) {
		this.createDate = createDate;
	}

    /**
     * Return the value associated with the column: displayName.
	 * @return A String object (this.displayName)
	 */
	@Basic( optional = true )
	@Column( name = "display_name", length = 50  )
	public String getDisplayName() {
		return this.displayName;
		
	}
	

  
    /**  
     * Set the value related to the column: displayName.
	 * @param displayName the displayName value you wish to set
	 */
	public void setDisplayName(final String displayName) {
		this.displayName = displayName;
	}

    /**
     * Return the value associated with the column: email.
	 * @return A String object (this.email)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 80  )
	public String getEmail() {
		return this.email;
		
	}
	

  
    /**  
     * Set the value related to the column: email.
	 * @param email the email value you wish to set
	 */
	public void setEmail(final String email) {
		this.email = email;
	}

    /**
     * Return the value associated with the column: enabled.
	 * @return A Boolean object (this.enabled)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Boolean isEnabled() {
		return this.enabled;
		
	}
	

  
    /**  
     * Set the value related to the column: enabled.
	 * @param enabled the enabled value you wish to set
	 */
	public void setEnabled(final Boolean enabled) {
		this.enabled = enabled;
	}

    /**
     * Return the value associated with the column: failedLogins.
	 * @return A Integer object (this.failedLogins)
	 */
	@Basic( optional = false )
	@Column( name = "failed_logins", nullable = false  )
	public Integer getFailedLogins() {
		return this.failedLogins;
		
	}
	

  
    /**  
     * Set the value related to the column: failedLogins.
	 * @param failedLogins the failedLogins value you wish to set
	 */
	public void setFailedLogins(final Integer failedLogins) {
		this.failedLogins = failedLogins;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "user_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: institution.
	 * @return A Set&lt;Institution&gt; object (this.institution)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "owner"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "user_id", nullable = false  )
	public Set<Institution> getInstitutions() {
		return this.institutions;
		
	}
	
	/**
	 * Adds a bi-directional link of type Institution to the institutions set.
	 * @param institution item to add
	 */
	public void addInstitution(Institution institution) {
		institution.setOwner(this);
		this.institutions.add(institution);
	}

  
    /**  
     * Set the value related to the column: institution.
	 * @param institution the institution value you wish to set
	 */
	public void setInstitutions(final Set<Institution> institution) {
		this.institutions = institution;
	}

    /**
     * Return the value associated with the column: lastLoginDate.
	 * @return A Date object (this.lastLoginDate)
	 */
	@Basic( optional = false )
	@Column( name = "last_login_date", nullable = false  )
	public Date getLastLoginDate() {
		return this.lastLoginDate;
		
	}
	

  
    /**  
     * Set the value related to the column: lastLoginDate.
	 * @param lastLoginDate the lastLoginDate value you wish to set
	 */
	public void setLastLoginDate(final Date lastLoginDate) {
		this.lastLoginDate = lastLoginDate;
	}

    /**
     * Return the value associated with the column: locked.
	 * @return A Boolean object (this.locked)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Boolean isLocked() {
		return this.locked;
		
	}
	

  
    /**  
     * Set the value related to the column: locked.
	 * @param locked the locked value you wish to set
	 */
	public void setLocked(final Boolean locked) {
		this.locked = locked;
	}

    /**
     * Return the value associated with the column: password.
	 * @return A String object (this.password)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 41  )
	public String getPassword() {
		return this.password;
		
	}
	

  
    /**  
     * Set the value related to the column: password.
	 * @param password the password value you wish to set
	 */
	public void setPassword(final String password) {
		this.password = password;
	}

    /**
     * Return the value associated with the column: role.
	 * @return A UserRoles object (this.role)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "role", nullable = false )
	public UserRoles getRole() {
		return this.role;
		
	}
	

  
    /**  
     * Set the value related to the column: role.
	 * @param role the role value you wish to set
	 */
	public void setRole(final UserRoles role) {
		this.role = role;
	}

    /**
     * Return the value associated with the column: student.
	 * @return A Set&lt;Student&gt; object (this.student)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "parentGuardian"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "user_id", nullable = false  )
	public Set<Student> getStudents() {
		return this.students;
		
	}
	
	/**
	 * Adds a bi-directional link of type Student to the students set.
	 * @param student item to add
	 */
	public void addStudent(Student student) {
		student.setParentGuardian(this);
		this.students.add(student);
	}

  
    /**  
     * Set the value related to the column: student.
	 * @param student the student value you wish to set
	 */
	public void setStudents(final Set<Student> student) {
		this.students = student;
	}

    /**
     * Return the value associated with the column: teamManager.
	 * @return A Set&lt;TeamManager&gt; object (this.teamManager)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "managerUser"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "user_id", nullable = false  )
	public Set<TeamManager> getTeamManagers() {
		return this.teamManagers;
		
	}
	
	/**
	 * Adds a bi-directional link of type TeamManager to the teamManagers set.
	 * @param teamManager item to add
	 */
	public void addTeamManager(TeamManager teamManager) {
		teamManager.setManagerUser(this);
		this.teamManagers.add(teamManager);
	}

  
    /**  
     * Set the value related to the column: teamManager.
	 * @param teamManager the teamManager value you wish to set
	 */
	public void setTeamManagers(final Set<TeamManager> teamManager) {
		this.teamManagers = teamManager;
	}

    /**
     * Return the value associated with the column: updatedDate.
	 * @return A Date object (this.updatedDate)
	 */
	@Basic( optional = false )
	@Column( name = "updated_date", nullable = false  )
	public Date getUpdatedDate() {
		return this.updatedDate;
		
	}
	

  
    /**  
     * Set the value related to the column: updatedDate.
	 * @param updatedDate the updatedDate value you wish to set
	 */
	public void setUpdatedDate(final Date updatedDate) {
		this.updatedDate = updatedDate;
	}

    /**
     * Return the value associated with the column: userDetails.
	 * @return A Set&lt;UserDetails&gt; object (this.userDetails)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "user"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "user_id", nullable = false  )
	public Set<UserDetails> getUserDetailss() {
		return this.userDetailss;
		
	}
	
	/**
	 * Adds a bi-directional link of type UserDetails to the userDetailss set.
	 * @param userDetails item to add
	 */
	public void addUserDetails(UserDetails userDetails) {
		userDetails.setUser(this);
		this.userDetailss.add(userDetails);
	}

  
    /**  
     * Set the value related to the column: userDetails.
	 * @param userDetails the userDetails value you wish to set
	 */
	public void setUserDetailss(final Set<UserDetails> userDetails) {
		this.userDetailss = userDetails;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Users clone() throws CloneNotSupportedException {
		
        final Users copy = (Users)super.clone();

		copy.setCreateDate(this.getCreateDate());
		copy.setDisplayName(this.getDisplayName());
		copy.setEmail(this.getEmail());
		copy.setEnabled(this.isEnabled());
		copy.setFailedLogins(this.getFailedLogins());
		copy.setId(this.getId());
		if (this.getInstitutions() != null) {
			copy.getInstitutions().addAll(this.getInstitutions());
		}
		copy.setLastLoginDate(this.getLastLoginDate());
		copy.setLocked(this.isLocked());
		copy.setPassword(this.getPassword());
		copy.setRole(this.getRole());
		if (this.getStudents() != null) {
			copy.getStudents().addAll(this.getStudents());
		}
		if (this.getTeamManagers() != null) {
			copy.getTeamManagers().addAll(this.getTeamManagers());
		}
		copy.setUpdatedDate(this.getUpdatedDate());
		if (this.getUserDetailss() != null) {
			copy.getUserDetailss().addAll(this.getUserDetailss());
		}
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createDate: " + this.getCreateDate() + ", ");
		sb.append("displayName: " + this.getDisplayName() + ", ");
		sb.append("email: " + this.getEmail() + ", ");
		sb.append("enabled: " + this.isEnabled() + ", ");
		sb.append("failedLogins: " + this.getFailedLogins() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("lastLoginDate: " + this.getLastLoginDate() + ", ");
		sb.append("locked: " + this.isLocked() + ", ");
		sb.append("password: " + this.getPassword() + ", ");
		sb.append("updatedDate: " + this.getUpdatedDate() + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Users that; 
		try {
			that = (Users) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreateDate() == null) && (that.getCreateDate() == null)) || (getCreateDate() != null && getCreateDate().equals(that.getCreateDate())));
		result = result && (((getDisplayName() == null) && (that.getDisplayName() == null)) || (getDisplayName() != null && getDisplayName().equals(that.getDisplayName())));
		result = result && (((getEmail() == null) && (that.getEmail() == null)) || (getEmail() != null && getEmail().equals(that.getEmail())));
		result = result && (((isEnabled() == null) && (that.isEnabled() == null)) || (isEnabled() != null && isEnabled().equals(that.isEnabled())));
		result = result && (((getFailedLogins() == null) && (that.getFailedLogins() == null)) || (getFailedLogins() != null && getFailedLogins().equals(that.getFailedLogins())));
		result = result && (((getLastLoginDate() == null) && (that.getLastLoginDate() == null)) || (getLastLoginDate() != null && getLastLoginDate().equals(that.getLastLoginDate())));
		result = result && (((isLocked() == null) && (that.isLocked() == null)) || (isLocked() != null && isLocked().equals(that.isLocked())));
		result = result && (((getPassword() == null) && (that.getPassword() == null)) || (getPassword() != null && getPassword().equals(that.getPassword())));
		result = result && (((getRole() == null) && (that.getRole() == null)) || (getRole() != null && getRole().getId().equals(that.getRole().getId())));	
		result = result && (((getUpdatedDate() == null) && (that.getUpdatedDate() == null)) || (getUpdatedDate() != null && getUpdatedDate().equals(that.getUpdatedDate())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
