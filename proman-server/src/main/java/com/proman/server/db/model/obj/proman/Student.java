package com.proman.server.db.model.obj.proman;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;
import com.proman.server.db.model.obj.proman.TeamStudent;
import com.proman.server.db.model.obj.proman.iface.IStudent;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: student.
 * @author autogenerated
 */

@Entity
@Table(name = "student", catalog = "proman")
public class Student implements Cloneable, Serializable, IPojoGenEntity, IStudent {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559039808L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String authorizedPickupPersons;
	/** Field mapping. */
	private Date createDate;
	/** Field mapping. */
	private String firstName;
	/** Field mapping. */
	private String foodAllergies;
	/** Field mapping. */
	private String grade;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String lastName;
	/** Field mapping. */
	private String otherConditions;
	/** Field mapping. */
	private Users parentGuardian;
	/** Field mapping. */
	private String school;
	/** Field mapping. */
	private String teacher;
	/** Field mapping. */
	private Set<TeamStudent> teamStudents = new HashSet<TeamStudent>();

	/** Field mapping. */
	private Date updatedDate;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Student() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Student(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param authorizedPickupPersons String object;
	 * @param createDate Date object;
	 * @param firstName String object;
	 * @param id Integer object;
	 * @param lastName String object;
	 * @param parentGuardian Users object;
	 * @param updatedDate Date object;
	 */
	public Student(String authorizedPickupPersons, Date createDate, String firstName, 					
			Integer id, String lastName, Users parentGuardian, 					
			Date updatedDate) {

		this.authorizedPickupPersons = authorizedPickupPersons;
		this.createDate = createDate;
		this.firstName = firstName;
		this.id = id;
		this.lastName = lastName;
		this.parentGuardian = parentGuardian;
		this.updatedDate = updatedDate;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Student.class;
	}
 

    /**
     * Return the value associated with the column: authorizedPickupPersons.
	 * @return A String object (this.authorizedPickupPersons)
	 */
	@Basic( optional = false )
	@Column( name = "authorized_pickup_persons", nullable = false, length = 250  )
	public String getAuthorizedPickupPersons() {
		return this.authorizedPickupPersons;
		
	}
	

  
    /**  
     * Set the value related to the column: authorizedPickupPersons.
	 * @param authorizedPickupPersons the authorizedPickupPersons value you wish to set
	 */
	public void setAuthorizedPickupPersons(final String authorizedPickupPersons) {
		this.authorizedPickupPersons = authorizedPickupPersons;
	}

    /**
     * Return the value associated with the column: createDate.
	 * @return A Date object (this.createDate)
	 */
	@Basic( optional = false )
	@Column( name = "create_date", nullable = false  )
	public Date getCreateDate() {
		return this.createDate;
		
	}
	

  
    /**  
     * Set the value related to the column: createDate.
	 * @param createDate the createDate value you wish to set
	 */
	public void setCreateDate(final Date createDate) {
		this.createDate = createDate;
	}

    /**
     * Return the value associated with the column: firstName.
	 * @return A String object (this.firstName)
	 */
	@Basic( optional = false )
	@Column( name = "first_name", nullable = false, length = 50  )
	public String getFirstName() {
		return this.firstName;
		
	}
	

  
    /**  
     * Set the value related to the column: firstName.
	 * @param firstName the firstName value you wish to set
	 */
	public void setFirstName(final String firstName) {
		this.firstName = firstName;
	}

    /**
     * Return the value associated with the column: foodAllergies.
	 * @return A String object (this.foodAllergies)
	 */
	@Basic( optional = true )
	@Column( name = "food_allergies", length = 50  )
	public String getFoodAllergies() {
		return this.foodAllergies;
		
	}
	

  
    /**  
     * Set the value related to the column: foodAllergies.
	 * @param foodAllergies the foodAllergies value you wish to set
	 */
	public void setFoodAllergies(final String foodAllergies) {
		this.foodAllergies = foodAllergies;
	}

    /**
     * Return the value associated with the column: grade.
	 * @return A String object (this.grade)
	 */
	@Basic( optional = true )
	@Column( length = 10  )
	public String getGrade() {
		return this.grade;
		
	}
	

  
    /**  
     * Set the value related to the column: grade.
	 * @param grade the grade value you wish to set
	 */
	public void setGrade(final String grade) {
		this.grade = grade;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "student_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: lastName.
	 * @return A String object (this.lastName)
	 */
	@Basic( optional = false )
	@Column( name = "last_name", nullable = false, length = 50  )
	public String getLastName() {
		return this.lastName;
		
	}
	

  
    /**  
     * Set the value related to the column: lastName.
	 * @param lastName the lastName value you wish to set
	 */
	public void setLastName(final String lastName) {
		this.lastName = lastName;
	}

    /**
     * Return the value associated with the column: otherConditions.
	 * @return A String object (this.otherConditions)
	 */
	@Basic( optional = true )
	@Column( name = "other_conditions", length = 50  )
	public String getOtherConditions() {
		return this.otherConditions;
		
	}
	

  
    /**  
     * Set the value related to the column: otherConditions.
	 * @param otherConditions the otherConditions value you wish to set
	 */
	public void setOtherConditions(final String otherConditions) {
		this.otherConditions = otherConditions;
	}

    /**
     * Return the value associated with the column: parentGuardian.
	 * @return A Users object (this.parentGuardian)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "parent_guardian_id", nullable = false )
	public Users getParentGuardian() {
		return this.parentGuardian;
		
	}
	

  
    /**  
     * Set the value related to the column: parentGuardian.
	 * @param parentGuardian the parentGuardian value you wish to set
	 */
	public void setParentGuardian(final Users parentGuardian) {
		this.parentGuardian = parentGuardian;
	}

    /**
     * Return the value associated with the column: school.
	 * @return A String object (this.school)
	 */
	@Basic( optional = true )
	@Column( length = 50  )
	public String getSchool() {
		return this.school;
		
	}
	

  
    /**  
     * Set the value related to the column: school.
	 * @param school the school value you wish to set
	 */
	public void setSchool(final String school) {
		this.school = school;
	}

    /**
     * Return the value associated with the column: teacher.
	 * @return A String object (this.teacher)
	 */
	@Basic( optional = true )
	@Column( length = 10  )
	public String getTeacher() {
		return this.teacher;
		
	}
	

  
    /**  
     * Set the value related to the column: teacher.
	 * @param teacher the teacher value you wish to set
	 */
	public void setTeacher(final String teacher) {
		this.teacher = teacher;
	}

    /**
     * Return the value associated with the column: teamStudent.
	 * @return A Set&lt;TeamStudent&gt; object (this.teamStudent)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.student"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( name = "student_id", nullable = false  )
	public Set<TeamStudent> getTeamStudents() {
		return this.teamStudents;
		
	}
	
	/**
	 * Adds a bi-directional link of type TeamStudent to the teamStudents set.
	 * @param teamStudent item to add
	 */
	public void addTeamStudent(TeamStudent teamStudent) {
		teamStudent.getId().setStudent(this);
		this.teamStudents.add(teamStudent);
	}

  
    /**  
     * Set the value related to the column: teamStudent.
	 * @param teamStudent the teamStudent value you wish to set
	 */
	public void setTeamStudents(final Set<TeamStudent> teamStudent) {
		this.teamStudents = teamStudent;
	}

    /**
     * Return the value associated with the column: updatedDate.
	 * @return A Date object (this.updatedDate)
	 */
	@Basic( optional = false )
	@Column( name = "updated_date", nullable = false  )
	public Date getUpdatedDate() {
		return this.updatedDate;
		
	}
	

  
    /**  
     * Set the value related to the column: updatedDate.
	 * @param updatedDate the updatedDate value you wish to set
	 */
	public void setUpdatedDate(final Date updatedDate) {
		this.updatedDate = updatedDate;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Student clone() throws CloneNotSupportedException {
		
        final Student copy = (Student)super.clone();

		copy.setAuthorizedPickupPersons(this.getAuthorizedPickupPersons());
		copy.setCreateDate(this.getCreateDate());
		copy.setFirstName(this.getFirstName());
		copy.setFoodAllergies(this.getFoodAllergies());
		copy.setGrade(this.getGrade());
		copy.setId(this.getId());
		copy.setLastName(this.getLastName());
		copy.setOtherConditions(this.getOtherConditions());
		copy.setParentGuardian(this.getParentGuardian());
		copy.setSchool(this.getSchool());
		copy.setTeacher(this.getTeacher());
		if (this.getTeamStudents() != null) {
			copy.getTeamStudents().addAll(this.getTeamStudents());
		}
		copy.setUpdatedDate(this.getUpdatedDate());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("authorizedPickupPersons: " + this.getAuthorizedPickupPersons() + ", ");
		sb.append("createDate: " + this.getCreateDate() + ", ");
		sb.append("firstName: " + this.getFirstName() + ", ");
		sb.append("foodAllergies: " + this.getFoodAllergies() + ", ");
		sb.append("grade: " + this.getGrade() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("lastName: " + this.getLastName() + ", ");
		sb.append("otherConditions: " + this.getOtherConditions() + ", ");
		sb.append("school: " + this.getSchool() + ", ");
		sb.append("teacher: " + this.getTeacher() + ", ");
		sb.append("updatedDate: " + this.getUpdatedDate());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Student that; 
		try {
			that = (Student) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAuthorizedPickupPersons() == null) && (that.getAuthorizedPickupPersons() == null)) || (getAuthorizedPickupPersons() != null && getAuthorizedPickupPersons().equals(that.getAuthorizedPickupPersons())));
		result = result && (((getCreateDate() == null) && (that.getCreateDate() == null)) || (getCreateDate() != null && getCreateDate().equals(that.getCreateDate())));
		result = result && (((getFirstName() == null) && (that.getFirstName() == null)) || (getFirstName() != null && getFirstName().equals(that.getFirstName())));
		result = result && (((getFoodAllergies() == null) && (that.getFoodAllergies() == null)) || (getFoodAllergies() != null && getFoodAllergies().equals(that.getFoodAllergies())));
		result = result && (((getGrade() == null) && (that.getGrade() == null)) || (getGrade() != null && getGrade().equals(that.getGrade())));
		result = result && (((getLastName() == null) && (that.getLastName() == null)) || (getLastName() != null && getLastName().equals(that.getLastName())));
		result = result && (((getOtherConditions() == null) && (that.getOtherConditions() == null)) || (getOtherConditions() != null && getOtherConditions().equals(that.getOtherConditions())));
		result = result && (((getParentGuardian() == null) && (that.getParentGuardian() == null)) || (getParentGuardian() != null && getParentGuardian().getId().equals(that.getParentGuardian().getId())));	
		result = result && (((getSchool() == null) && (that.getSchool() == null)) || (getSchool() != null && getSchool().equals(that.getSchool())));
		result = result && (((getTeacher() == null) && (that.getTeacher() == null)) || (getTeacher() != null && getTeacher().equals(that.getTeacher())));
		result = result && (((getUpdatedDate() == null) && (that.getUpdatedDate() == null)) || (getUpdatedDate() != null && getUpdatedDate().equals(that.getUpdatedDate())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
