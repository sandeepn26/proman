package com.proman.server.db.model.obj.proman;

import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;
import com.proman.server.db.model.obj.proman.iface.IInstitution;


/** 
 * Object mapping for hibernate-handled table: institution.
 * @author autogenerated
 */

@Entity
@Table(name = "institution", catalog = "proman")
public class Institution implements Cloneable, Serializable, IPojoGenEntity, IInstitution {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559039810L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Date createDate;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String institutionCode;
	/** Field mapping. */
	private String institutionDescription;
	/** Field mapping. */
	private String institutionName;
	/** Field mapping. */
	private String institutionType;
	/** Field mapping. */
	private Users owner;
	/** Field mapping. */
	private Date updateDate;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Institution() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Institution(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param createDate Date object;
	 * @param id Integer object;
	 * @param institutionCode String object;
	 * @param institutionName String object;
	 * @param institutionType String object;
	 * @param owner Users object;
	 * @param updateDate Date object;
	 */
	public Institution(Date createDate, Integer id, String institutionCode, 					
			String institutionName, String institutionType, Users owner, 					
			Date updateDate) {

		this.createDate = createDate;
		this.id = id;
		this.institutionCode = institutionCode;
		this.institutionName = institutionName;
		this.institutionType = institutionType;
		this.owner = owner;
		this.updateDate = updateDate;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Institution.class;
	}
 

    /**
     * Return the value associated with the column: createDate.
	 * @return A Date object (this.createDate)
	 */
	@Basic( optional = false )
	@Column( name = "create_date", nullable = false  )
	public Date getCreateDate() {
		return this.createDate;
		
	}
	

  
    /**  
     * Set the value related to the column: createDate.
	 * @param createDate the createDate value you wish to set
	 */
	public void setCreateDate(final Date createDate) {
		this.createDate = createDate;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "institution_id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: institutionCode.
	 * @return A String object (this.institutionCode)
	 */
	@Basic( optional = false )
	@Column( name = "institution_code", nullable = false, length = 20  )
	public String getInstitutionCode() {
		return this.institutionCode;
		
	}
	

  
    /**  
     * Set the value related to the column: institutionCode.
	 * @param institutionCode the institutionCode value you wish to set
	 */
	public void setInstitutionCode(final String institutionCode) {
		this.institutionCode = institutionCode;
	}

    /**
     * Return the value associated with the column: institutionDescription.
	 * @return A String object (this.institutionDescription)
	 */
	@Basic( optional = true )
	@Column( name = "institution_description", length = 50  )
	public String getInstitutionDescription() {
		return this.institutionDescription;
		
	}
	

  
    /**  
     * Set the value related to the column: institutionDescription.
	 * @param institutionDescription the institutionDescription value you wish to set
	 */
	public void setInstitutionDescription(final String institutionDescription) {
		this.institutionDescription = institutionDescription;
	}

    /**
     * Return the value associated with the column: institutionName.
	 * @return A String object (this.institutionName)
	 */
	@Basic( optional = false )
	@Column( name = "institution_name", nullable = false, length = 50  )
	public String getInstitutionName() {
		return this.institutionName;
		
	}
	

  
    /**  
     * Set the value related to the column: institutionName.
	 * @param institutionName the institutionName value you wish to set
	 */
	public void setInstitutionName(final String institutionName) {
		this.institutionName = institutionName;
	}

    /**
     * Return the value associated with the column: institutionType.
	 * @return A String object (this.institutionType)
	 */
	@Basic( optional = false )
	@Column( name = "institution_type", nullable = false, length = 10  )
	public String getInstitutionType() {
		return this.institutionType;
		
	}
	

  
    /**  
     * Set the value related to the column: institutionType.
	 * @param institutionType the institutionType value you wish to set
	 */
	public void setInstitutionType(final String institutionType) {
		this.institutionType = institutionType;
	}

    /**
     * Return the value associated with the column: owner.
	 * @return A Users object (this.owner)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "owner_id", nullable = false )
	public Users getOwner() {
		return this.owner;
		
	}
	

  
    /**  
     * Set the value related to the column: owner.
	 * @param owner the owner value you wish to set
	 */
	public void setOwner(final Users owner) {
		this.owner = owner;
	}

    /**
     * Return the value associated with the column: updateDate.
	 * @return A Date object (this.updateDate)
	 */
	@Basic( optional = false )
	@Column( name = "update_date", nullable = false  )
	public Date getUpdateDate() {
		return this.updateDate;
		
	}
	

  
    /**  
     * Set the value related to the column: updateDate.
	 * @param updateDate the updateDate value you wish to set
	 */
	public void setUpdateDate(final Date updateDate) {
		this.updateDate = updateDate;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Institution clone() throws CloneNotSupportedException {
		
        final Institution copy = (Institution)super.clone();

		copy.setCreateDate(this.getCreateDate());
		copy.setId(this.getId());
		copy.setInstitutionCode(this.getInstitutionCode());
		copy.setInstitutionDescription(this.getInstitutionDescription());
		copy.setInstitutionName(this.getInstitutionName());
		copy.setInstitutionType(this.getInstitutionType());
		copy.setOwner(this.getOwner());
		copy.setUpdateDate(this.getUpdateDate());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createDate: " + this.getCreateDate() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("institutionCode: " + this.getInstitutionCode() + ", ");
		sb.append("institutionDescription: " + this.getInstitutionDescription() + ", ");
		sb.append("institutionName: " + this.getInstitutionName() + ", ");
		sb.append("institutionType: " + this.getInstitutionType() + ", ");
		sb.append("updateDate: " + this.getUpdateDate());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Institution that; 
		try {
			that = (Institution) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreateDate() == null) && (that.getCreateDate() == null)) || (getCreateDate() != null && getCreateDate().equals(that.getCreateDate())));
		result = result && (((getInstitutionCode() == null) && (that.getInstitutionCode() == null)) || (getInstitutionCode() != null && getInstitutionCode().equals(that.getInstitutionCode())));
		result = result && (((getInstitutionDescription() == null) && (that.getInstitutionDescription() == null)) || (getInstitutionDescription() != null && getInstitutionDescription().equals(that.getInstitutionDescription())));
		result = result && (((getInstitutionName() == null) && (that.getInstitutionName() == null)) || (getInstitutionName() != null && getInstitutionName().equals(that.getInstitutionName())));
		result = result && (((getInstitutionType() == null) && (that.getInstitutionType() == null)) || (getInstitutionType() != null && getInstitutionType().equals(that.getInstitutionType())));
		result = result && (((getOwner() == null) && (that.getOwner() == null)) || (getOwner() != null && getOwner().getId().equals(that.getOwner().getId())));	
		result = result && (((getUpdateDate() == null) && (that.getUpdateDate() == null)) || (getUpdateDate() != null && getUpdateDate().equals(that.getUpdateDate())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}

}
