package com.proman.server.db.model.obj.proman;

import com.github.wwadge.hbnpojogen.persistence.IPojoGenEntity;
import com.proman.server.db.model.obj.proman.iface.IStudentGrades;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;


/** 
 * Object mapping for hibernate-handled table: student_grades.
 * @author autogenerated
 */

@Entity
@Table(name = "student_grades", catalog = "proman")
public class StudentGrades implements Cloneable, Serializable, IPojoGenEntity, IStudentGrades {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559039807L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, String> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, String>());
	
	/** hashCode temporary storage. */
	private volatile String hashCode;
	

	/** Field mapping. */
	private Date createDate;
	/** Field mapping. */
	private String gradeDescription;
	/** Field mapping. */
	private Integer gradeValue;
	/** Field mapping. */
	private String id;
	/** Field mapping. */
	private Date updateDate;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public StudentGrades() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public StudentGrades(String id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param createDate Date object;
	 * @param gradeDescription String object;
	 * @param gradeValue Integer object;
	 * @param id String object;
	 * @param updateDate Date object;
	 */
	public StudentGrades(Date createDate, String gradeDescription, Integer gradeValue, 					
			String id, Date updateDate) {

		this.createDate = createDate;
		this.gradeDescription = gradeDescription;
		this.gradeValue = gradeValue;
		this.id = id;
		this.updateDate = updateDate;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return StudentGrades.class;
	}
 

    /**
     * Return the value associated with the column: createDate.
	 * @return A Date object (this.createDate)
	 */
	@Basic( optional = false )
	@Column( name = "create_date", nullable = false  )
	public Date getCreateDate() {
		return this.createDate;
		
	}
	

  
    /**  
     * Set the value related to the column: createDate.
	 * @param createDate the createDate value you wish to set
	 */
	public void setCreateDate(final Date createDate) {
		this.createDate = createDate;
	}

    /**
     * Return the value associated with the column: gradeDescription.
	 * @return A String object (this.gradeDescription)
	 */
	@Basic( optional = false )
	@Column( name = "grade_description", nullable = false, length = 25  )
	public String getGradeDescription() {
		return this.gradeDescription;
		
	}
	

  
    /**  
     * Set the value related to the column: gradeDescription.
	 * @param gradeDescription the gradeDescription value you wish to set
	 */
	public void setGradeDescription(final String gradeDescription) {
		this.gradeDescription = gradeDescription;
	}

    /**
     * Return the value associated with the column: gradeValue.
	 * @return A Integer object (this.gradeValue)
	 */
	@Basic( optional = false )
	@Column( name = "grade_value", nullable = false  )
	public Integer getGradeValue() {
		return this.gradeValue;
		
	}
	

  
    /**  
     * Set the value related to the column: gradeValue.
	 * @param gradeValue the gradeValue value you wish to set
	 */
	public void setGradeValue(final Integer gradeValue) {
		this.gradeValue = gradeValue;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A String object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "grade", nullable = false, length = 10  )
	public String getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final String id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null ) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: updateDate.
	 * @return A Date object (this.updateDate)
	 */
	@Basic( optional = false )
	@Column( name = "update_date", nullable = false  )
	public Date getUpdateDate() {
		return this.updateDate;
		
	}
	

  
    /**  
     * Set the value related to the column: updateDate.
	 * @param updateDate the updateDate value you wish to set
	 */
	public void setUpdateDate(final Date updateDate) {
		this.updateDate = updateDate;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public StudentGrades clone() throws CloneNotSupportedException {
		
        final StudentGrades copy = (StudentGrades)super.clone();

		copy.setCreateDate(this.getCreateDate());
		copy.setGradeDescription(this.getGradeDescription());
		copy.setGradeValue(this.getGradeValue());
		copy.setId(this.getId());
		copy.setUpdateDate(this.getUpdateDate());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("createDate: " + this.getCreateDate() + ", ");
		sb.append("gradeDescription: " + this.getGradeDescription() + ", ");
		sb.append("gradeValue: " + this.getGradeValue() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("updateDate: " + this.getUpdateDate());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final StudentGrades that; 
		try {
			that = (StudentGrades) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getCreateDate() == null) && (that.getCreateDate() == null)) || (getCreateDate() != null && getCreateDate().equals(that.getCreateDate())));
		result = result && (((getGradeDescription() == null) && (that.getGradeDescription() == null)) || (getGradeDescription() != null && getGradeDescription().equals(that.getGradeDescription())));
		result = result && (((getGradeValue() == null) && (that.getGradeValue() == null)) || (getGradeValue() != null && getGradeValue().equals(that.getGradeValue())));
		result = result && (((getUpdateDate() == null) && (that.getUpdateDate() == null)) || (getUpdateDate() != null && getUpdateDate().equals(that.getUpdateDate())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					String newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null ) {
							newHashCode = getId();
						} else {
						newHashCode = String.valueOf(super.hashCode());

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode.hashCode();
	}
	

	
}
